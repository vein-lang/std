#space "vein/lang"

[special, forwarded, alias("string")]
public class String : Object
{
    [native("!!value")]
    __value: raw;
    //[native]
    //public extern this[index: i32]: Char;
    [native]
    public /*extern*/ Length: i32;
    /*
    // temporary using vm_bridge, todo: rework to using mana-code
    [native("@_fast_end_with_string")]
    public extern EndsWith(value: Char): bool;
    // temporary using vm_bridge, todo: rework to using mana-code
    [native("@_fast_start_with_string")]
    public extern startsWith(value: Char): bool;

    public trim(): string
    {
        return string.trimEnd(string.trimStart(this));
    }

    [native("@_fast_concat_string")]
    public static extern concat(s2: string, s2: string): string;

    // temporary using vm_bridge, todo: rework to using mana-code
    [native("@_fast_trim_start")]
    public static extern trimStart(s: string): string;

    // temporary using vm_bridge, todo: rework to using mana-code
    [native("@_fast_trim_end")]
    public static extern trimEnd(s: string): string;
    */

    public override toString(): String
        |> Sys.toString(this);

    [special]
    public static op_Add(v1: string, v2: string): string
        |> self.Concat(v1, v2);
    [special]
    public static op_Add(v1: string, v2: i32): string
    {
        auto t = v2.toString();
        return self.Concat(v1, t);
    }

    [special]
    public static op_NotEqual(v1: string, v2: string): bool
        |> !self.op_Equal(v1, v2);

    [special]
    public static op_Equal(v1: string, v2: string): bool
        |> self.Equal(v1, v2);


    [native("i_call_String_Concat")]
    private extern static Concat(v1: string, v2: string): string;
    [native("i_call_String_Equal")]
    private extern static Equal(v1: string, v2: string): string;
}