#space "vein/lang"

#use "vein/lang/workspace"

public class Type
{
    /* keep name in IshtarGC.cs */
    private _unique_id: u16;
    /* keep name in IshtarGC.cs */
    private _module_id: u16;
    /* keep name in IshtarGC.cs */
    private _flags: i32;
    /* keep name in IshtarGC.cs */
    private _name: string;
    /* keep name in IshtarGC.cs */
    private _namespace: string;

    internal new() { } // internal ctor

    public isPublic: boolean 
        |> (this._flags & (1 << 1)) != 0;
    public isStatic: boolean 
        |> (this._flags & (1 << 2)) != 0;
    public isPrivate: boolean 
        |> (this._flags & (1 << 5)) != 0;
    public isInterface: boolean 
        |> (this._flags & (1 << 8)) != 0;

    public name: string 
        |> this._name;
    public namespace: string 
        |> this._namespace;
    public flags: i32 
        |> this._flags;

    
    
    public static findByName(s: string): Type
        |> self._findByName(s);
    [MaybeNullable]
    public static tryFindByName(s: string): Type
    {
        try
        {
            return self.findByName(s);
        }
        catch
        {
            return null;
        }
    }

    public findField(name: string): Field
        |> self._findField(this, name);
    public findMethod(name: string): Function
        |> self._findField(this, name);



    [native("i_call_Type_findByName")]
    private static extern _findByName(name: string): Type;
    [native("i_call_Type_findField")]
    private static extern _findField(t: Type, name: string): Field;
    [native("i_call_Type_findMethod")]
    private static extern _findMethod(t: Type, name: string): Function;
}